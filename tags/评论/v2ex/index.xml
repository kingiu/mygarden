<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>评论/v2ex on</title><link>https://guozhi.3hmy.cn/tags/%E8%AF%84%E8%AE%BA/v2ex/</link><description>Recent content in 评论/v2ex on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://guozhi.3hmy.cn/tags/%E8%AF%84%E8%AE%BA/v2ex/index.xml" rel="self" type="application/rss+xml"/><item><title>内卷与996</title><link>https://guozhi.3hmy.cn/%E5%86%85%E5%8D%B7%E4%B8%8E996/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guozhi.3hmy.cn/%E5%86%85%E5%8D%B7%E4%B8%8E996/</guid><description>#评论/v2ex
@shmilypeter 我也在杭州，也曾做为甲方项目经理，负责招聘和管理 7 名合作方员工 1 年。听过他们最多的抱怨就是加班太多，且公司没有补偿。做为人，我能理解，但做为甲方，我无可奈何，因为合同上就是写着多少钱做出多少人月的工作量，我有一定灰度空间，但某种程度上而言，对合作方员工的仁慈，就是对本公司属下的残忍，反之亦然。而且实际感受也的确是，不说绝对的，只说相对对比，1w 月薪的合作方员工的 8 小时产出能力，普遍远不如本公司 2w 月薪员工的 4 小时产出。
最理想的当然是，自身能力具备选择的自由，比如能力强，就别去外包公司，能力更强，可以去牛逼的 955 公司。但大多数人之所以在当前的公司，当前的位置，的确也是没有更多的选择，不是嘛？希望 op 能理性分析自身实力，做出更优的选择。
我以上言论不是鼓励加班和剥削哈，我自己都想去 955 的公司享受生活呢，但相比之下，要么牛逼公司不要我，要么中等公司会让我收入骤减。</description></item><item><title>前端测试</title><link>https://guozhi.3hmy.cn/%E5%89%8D%E7%AB%AF%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guozhi.3hmy.cn/%E5%89%8D%E7%AB%AF%E6%B5%8B%E8%AF%95/</guid><description>#评论/v2ex
我司的前端测试职责 测试用例编写：根据业务场景和特性需求，编写测试用例，一般用 excel 描述清楚特性、场景、分级、预期结果等关键信息，并通过开发或架构师的 review 评审。 测试框架的单元测试 code：懂一些前端的测试，可能会需要负责[[mocha]]、[[jest]]等测试框架里面的单元测试的编写。一般基础的框架需要这种测试粒度，而快速迭代的业务，可能没这个成本写单元测试。 自动化 E2E 用例编写和执行：一些基线用例，门槛用例，用[[Selenium]]、[[Playwright]]进行端到端自动化测试。快速迭代的页面一般归类为高级别低频率测试用例，需要具体分析，要进行自动化用例的成本和收益的评估。 手工用例：自动化不能满足的某些场景；经评估，手工测试成本更低的一些复杂用例。 压力测试：前端的测试，一般就是造大量假数据，对 js 代码本身进行渲染性能测试，比如首屏加载速度，1 万行的表格的加载速度等等，一般能顺带测试到一些 api 是不是可靠，性能够不够。还有一些[[混沌测试]]之类的，有能力的可以搞一搞。 用户体验测试：有能力和话语权的前端测试，可以提出用户体验等方面的独特见解。 对类生产环境负责：保证类生产环境和生产环境的一致性，避免类生产的问题流到现网。大特性的版本，需要测试负责人出具测试报告（更多的是综合的，包括前端功能和各项特性，还是看上线的特性是什么）后，才能上线现网。相当于给 SRE 之前，在加一把可靠锁。bugfix 版本，也需要前端测试简单测一测，多一个保障。 总体而言，前端测试一般都是手工用例居多，所以技术含量偏低，一般都请外包员工来做以降低成本。有上进心的前端测试，一般不会满足于机械地页面重复点击，会在自动化测试、压力测试、环境管理等方面走出一条自己的路，给自己定义成综合测试，而不是局限于前端测试。 测试内容 门槛用例 自动化测试</description></item><item><title>插件的便利性及安全性，如何权衡</title><link>https://guozhi.3hmy.cn/%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BE%BF%E5%88%A9%E6%80%A7%E5%8F%8A%E5%AE%89%E5%85%A8%E6%80%A7%E5%A6%82%E4%BD%95%E6%9D%83%E8%A1%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guozhi.3hmy.cn/%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BE%BF%E5%88%A9%E6%80%A7%E5%8F%8A%E5%AE%89%E5%85%A8%E6%80%A7%E5%A6%82%E4%BD%95%E6%9D%83%E8%A1%A1/</guid><description>#评论/v2ex
我一直是 [[∑ 平台＋插件]] 类型的软件的拥趸，比如
[[VSCode]] [[Chrome]]， [[油猴脚本 - tempermonkey]]， [[Alfred]]， [[Obsidian]] 包括[[Docker]]，因为能方便拉取各种公开镜像直接run一个服务，我个人也将其定义为广义的[[∑ 平台＋插件]]类型的软件。 但最近用了个油猴脚本，有几千下载量，发现它有搜集我信息的疑似代码。我突然对自己之前无脑下载使用，几乎不管安全性的行为，产生了深深的质疑，大概率我已经有好多隐私信息被这些插件摸到过😫😫。这类插件一般都有 2 个特点：
免费的 提供很大方便，不用我们重复造轮子。 所以，忍不住不用感觉很难，但为了绝对安全，去看源码也有点本末倒置。我更多的就是当个掩耳盗铃之人，就选择相信平台，以及下载量较大，评分较高的知名插件了😅。 不知道大家是抱着什么样的心态和用法，去使用这类平台及插件的呢？ 以及还有哪些有很丰富的社区插件的平台型的软件呢？也不妨推荐出来。</description></item><item><title>杠精</title><link>https://guozhi.3hmy.cn/%E6%9D%A0%E7%B2%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guozhi.3hmy.cn/%E6%9D%A0%E7%B2%BE/</guid><description>x:: [[情绪大脑]]
#评论/v2ex
如何定义杠精？
angkec 先有情绪，再想各种办法输出
@ angkec 同意你精准的概括，只要情绪上来了，任何人，都可能变成杠精，且不自知。我有几次冷静下来后再细看自己的一些留言，就是充满杠味儿。</description></item></channel></rss>